# This file contains a configuration snippet for G-code M221 Txx 
#
# See docs/Config_Reference.md for a description of parameters.

#####################################################################
# All variables in this configuration, KLIPPER merges
# into one configuration  file [gcode_macro VARIABLE] .
#
# ATTENTION:
# If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_extrude_factor: {  }     # { 'extruder': 1.0, 'extruder1': 1.0  }

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _INIT_EXTRUDE_FACTOR]
gcode:
    
   {% set user_vars = printer["gcode_macro VARIABLE"] %}  
   {% set name = "extrude_factor " %}      # name variable
   {% set init = {   } %}     # default preset     

   {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
       {% if 'extruder' in tool  %} 
          ### update variable 'extrude_factor' 
          {% set _dummy = init.update( {tool:1.0} ) %}  
       {% endif %}
   {% endfor %} 

    SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"  
   {action_respond_info("Creating a list of variables for macro M221 ") if printer.save_variables.variables.dump_list}

##########################################################
# PRINTER EXTRUDE FACTOR MANAGEMENT
# Redefine G-code command M221 
# Function description: 
##########################################################
#
# M221           - view extrude factor for all tool
# M221 S105      - set extrude factor 105% for all tool 
# M221 S80 T0    - set extrude factor 80% for tool T0 
#
##########################################################

[gcode_macro M221]
rename_existing: M221.1
description: Extension "M221" by "T" for 4 extruders

gcode:

    ### reset printer['gcode_move'].extrude_factor to 100%   
      M221.1  S100
    
    ### params.S = <percentage>   
    ### params.T = [0|1|2|3] 
    {% set user_vars = printer["gcode_macro VARIABLE"] %}
    
    {% set name = "extrude_factor" %}      
    {% set var_init = user_vars. extrude_factor %}         
    
    {% set raw_flow = params.S|default(100)|int %}   
    {% set extrude_flow = (raw_flow /100)|round(2) %}       
     
     
     {% if  params.S is not defined %} 
        ### view extrude factor for all tool
          {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
              {% if 'extruder' in tool %} 
                 {% set flow  = user_vars.extrude_factor[tool|string] * 100 %}                        
                 {action_respond_info("Flow for %s set to %s percent." % (tool, flow|int )) }
              {% endif %}              
         {% endfor %}     
                    
      {% elif  params.T is not defined %} 
         ### set extrude factor for all tool 
          {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
               {% if 'extruder' in tool  %} 
                  ### update variable 'extrude_factor' 
                  {% set _dummy =var_init.update({tool: extrude_flow }) %}                            
               {% endif %}
         {% endfor %} 
               
      {% else %}
           ### set extrude factor for tool Txx
           {% if   user_vars.tool|length  <  (params.T|int) + 1%}
              {action_respond_info("The tool T%s is not defined for extrude factoror." % (params.T)) } 
           {% else %}
             {% set default_extruder = "extruder" if params.T|int == 0 else "extruder%s" % params.T %}                        
             ### update variable 'extrude_factor' 
             {% set _dummy = var_init.update({default_extruder: extrude_flow}) %}                        
          {% endif %}    
                   
      {% endif %}
                    
        ### save new variable 'extrude_factor'
        SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{var_init}"  
  
        ### set new extrude factor
     {% if  params.S is  defined %} 
         {% if 'gcode_macro M605' in printer and user_vars.idex_mode.active in [2,3] %}   
              ### set new rotation distance extruder in IDEX - Duplication, Mirrored mode
                SYNC_ROTATION_DISTANCE 
         {% elif default_extruder == printer.toolhead.extruder %} 
              ### reset rotation for 'active extruder'
               SET_ROTATION_DISTANCE  EXTRUDER={default_extruder}
         {% endif %} 
     {% endif %}   
 
##########################################################

[gcode_macro SET_ROTATION_DISTANCE]
gcode:
     ###  params.EXTRUDER = [extruder|extruder1|extruder2|extruder3] 
      {% set user_vars = printer["gcode_macro VARIABLE"] %}
      
      {% set target_extruder =  params.EXTRUDER|default("extruder") %} 
      {% set extrude_flow  = user_vars.extrude_factor[target_extruder]%}                        
       
         ### set new rotation_distance 
        {% if printer.configfile.settings[target_extruder].rotation_distance is defined %}
          {% set settings_rotation = ( printer.configfile.settings[target_extruder].rotation_distance  /  extrude_flow )  %}              
          {% set set_extruder = target_extruder %}  

        {% elif 'gcode_macro SWITCHING_EXTRUDER' in printer %}      
              {% set sync_extruder =  user_vars.switching_extruder[target_extruder] %}    
              {% set settings_rotation =( printer.configfile.settings[sync_extruder].rotation_distance * -1)  /  extrude_flow %}
              {% set set_extruder = sync_extruder %}
        {% endif %}            

          SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER={set_extruder} DISTANCE={settings_rotation}    

      
#########################################################

[gcode_macro SYNC_ROTATION_DISTANCE]
gcode:

     {% set user_vars = printer["gcode_macro VARIABLE"] %}     
     
        {% for tool in range(0,user_vars.toolhead|length)  %}                    
             
             ### set target extruder for IDEX / 4EX2 printer
             {% if 'gcode_macro SYNC_SWITCHING_TOOL' in printer %}
                {%  set pos_t =  user_vars.sync_switching_tool.active %} 
                {%  set target_extruder = user_vars.sync_switching_tool[pos_t][tool] %}             # 'extruder', 'extruder2'  / 'extruder1', 'extruder3' 
            {% elif 'gcode_macro M605' in printer %}
                   {%  set target_extruder = { 0: user_vars.toolhead[0][0], 1: user_vars.toolhead[1][0]}[tool]  %}    # 'extruder', 'extruder2'
            {% endif %}               
                   
            ### set new rotation_distance 
            SET_ROTATION_DISTANCE  EXTRUDER={target_extruder}    
     
    {% endfor %}
    
   
      
  
  
  
       