# This file contains a configuration for macro:
# 
#  M600: Change filament 
#  

#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_filament_change : { }

# e.g. filament_change = 'status':{'load':0, 'enable':false }
#                        'speed':{'unload':900, 'load':150, 'fast':300}
#                        'retract':{'little':0.6, 'heatbreak':10, 'cooling':3000}
#                        'distance':{'load':125,'unload':132 }

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _INIT_FILAMENT_CHANGE]
gcode:

 {% set user_vars = printer["gcode_macro VARIABLE"] %}
 {% set name = "filament_change" %}    
 {% set init =  user_vars.filament_change %}       
  
 {% set _dummy = init.update( {'status':{'load':0, 'enable':false } } ) %} 
 {% set _dummy = init.update( {'speed':{'unload':900, 'load':150, 'fast':300} } ) %} 
 {% set _dummy = init.update( {'retract':{'little':0.6, 'heatbreak':10, 'cooling':3000} } ) %} 
 {% set _dummy = init.update( {'distance':{'load':125,'unload':155 }} ) %} 
  
     SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
     {action_respond_info("Creating a list of variables for M600") if printer.save_variables.variables.dump_list}

#####################################################################
# FILAMENT CHANGE - MANAGEMENT
# Function description: 
#
# M600: Filament change pause
# Parameters
#
# X[pos]
# Y[pos]
# Z[relative lift]
# E[initial retract]
# L[later retract distance for removal]
# 
#
#####################################################################

[gcode_macro M600]
description: M600: Filament change 
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %}
  {% set name = "filament_change" %}
  {% set init = user_vars.filament_change %}


# {% if printer['virtual_sdcard'].is_active  %} 

    ### Change filament 
    RESPOND MSG=" Filament change"  
    
    {% set _dummy = init.status.update( {'enable':True } )%}
       SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE={name}  VALUE="{init}"              
    
    {% if 'gcode_macro M601' in printer %}
        M601   ### Pause print with park toolhead 
    {% else %}
        PAUSE     
    {% endif %} 
    
     ### Unload filament       
        UNLOAD_FILAMENT

    ### extension M600 macro function
    {% if 'gcode_macro WAIT_FOR' in printer %}  
       RESPOND MSG=" Press LOAD (to purge more) or RESUME button "    
       WAIT_FOR     ### wait for press LOAD_BUTTON and RESUME_BUTTON 
    {% endif %} 

#   {% else %}
#     RESPOND MSG=" Printing is not paused!  "
#   {% endif %}
      
#########################################################################  

[gcode_macro LOAD_FILAMENT]
gcode:

    {% set user_vars = printer["gcode_macro VARIABLE"] %}
    {% set name = "filament_change" %}
    {% set init = user_vars.filament_change %}

    {% set act_extr =printer.toolhead.extruder %}
    {% set max_extrude = printer.configfile.settings[(act_extr)].max_extrude_only_distance|int %}  
    {% set step = user_vars.filament_change.distance.load // max_extrude|int %}
    {% set rest = user_vars.filament_change.distance.load % max_extrude|float %}
     ### end of definitions ###
     
     {% if printer[(act_extr)].can_extrude | lower == 'true' %} 
        SAVE_GCODE_STATE NAME=load_filament 
        M83	 	   					
	   ### filament_change LOAD	             
         {% for n in range(step) %}
           G1 E{max_extrude} F{user_vars.filament_change.speed.fast}
         {% endfor %}
         {% if rest > 0.0 %}
           G1 E{rest} F{user_vars.filament_change.speed.load}  
         {% endif %}  	 
         ## Set load filament_change status
             {% set  _dummy = init.status.update( {'load':2 } )%}
              SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE={name}  VALUE="{init}"                
         M400
         M300
        RESPOND MSG=" Filamnet loaded "
        RESTORE_GCODE_STATE NAME=load_filament
    {% else %}
	       RESPOND MSG=" Extruder temperature is low!  "
	{% endif %}
        
#########################################################################

[gcode_macro UNLOAD_FILAMENT]
gcode:

    {% set user_vars = printer["gcode_macro VARIABLE"] %}
    {% set name = "filament_change" %}
    {% set init = user_vars.filament_change %}

    {% set act_extr =printer['toolhead'].extruder %}
    {% set max_extrude = printer.configfile.settings[(act_extr)].max_extrude_only_distance|int %}
    {% set step = user_vars.filament_change.distance.load // max_extrude|int %}
    {% set rest = user_vars.filament_change.distance.load % max_extrude|float %}    
    ### end of definitions ###                    

    {% if printer[(act_extr)].can_extrude | lower == 'true' %} 
        SAVE_GCODE_STATE NAME=unload_filament
        M83	                           
        ### filament_change tip shaping sequence	
        RESPOND MSG=" Filament tip shaping sequence" 
        G92 E0
        G1 E2 F{user_vars.filament_change.speed.load}
        G1 E0 
        G1 E3 
        G1 E0 
        G1 E4 
        G1 E0                  
        G1 E-{user_vars.filament_change.retract.heatbreak} F{user_vars.filament_change.speed.fast}                   
        G4 P{user_vars. filament_change.retract.cooling}          
        
        ### filament_change UNLOAD 
        {% for n in range(step) %}                
             G1 E-{max_extrude} F{user_vars.filament_change.speed.unload}         
        {% endfor %}        
        
        {% if rest > 0.0 %}
           G1 E-{rest} F{user_vars.filament_change.speed.unload}  
        {% endif %} 
        
        ## Set unload filament_change status
         {% set  _dummy = init.status.update( {'load':1 } )%}
            SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE={name} VALUE="{init}"
         M400
	 M300 R3  ### repeat beeper vith pause 
        RESPOND MSG=" Unloaded, insert new filament."
        RESTORE_GCODE_STATE NAME=unload_filament
     {% else %}
        RESPOND MSG=" Extruder temperature is low!  "
     {% endif %} 


