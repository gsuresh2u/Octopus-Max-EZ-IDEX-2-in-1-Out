# This file contains a configuration snippet for MULTI HOTEND
#
# See docs/Config_Reference.md for a description of parameters.

#####################################################################
# All variables in this configuration, KLIPPER merges
# into one configuration  file [gcode_macro VARIABLE] .
#
# ATTENTION:
# If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_multi_hotend : { }

# e.g. = {0: 'extruder', 1: 'extruder2', 'feedrate': 30000, 'unload': 20, 'load': 40, 'parking': [-32, 278], 'speed': 25}

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros in printer
# configuration and runs them.
#
# The order in which macros are run can be defined 
# using names:  _INIT_A_* ,  _INIT_B_* ,  _INIT_C_*  etc.
#############################################################

[gcode_macro _INIT_MULTI_HOTEND]          
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %} 
   {% set recovery = printer.save_variables.variables %}
   
   {% set name = "multi_hotend" %}    # name variable
   {% set init = { } %}     # default preset   


  {% if name in recovery %}    # -------------------------------------------------
     ### restore variable from SD card      
     {action_respond_info("Restore loaded extruder after restart from SD card.")}  
   
      ### init extruder after restart  
     {% if user_vars.toolhead|length > 1  %}      
        {% set init_toolhead_1 = recovery[name].1 %}
           ACTIVATE_TOOL EXTRUDER={init_toolhead_1} 
        {% set _dummy = init.update( {1: init_toolhead_1 } )   %}        
     {% endif %}

     {% set init_toolhead_0 = recovery[name].0 %}         
          ACTIVATE_TOOL EXTRUDER={init_toolhead_0} 
     {% set _dummy = init.update( {0: init_toolhead_0 } )  %}

      ### Apply activate tool Offsets
      {% set axis = printer.configfile.settings.dual_carriage.axis  
                     if 'dual_carriage' in printer['motion_report'].steppers  
                     else 'x' %}  

       {% set tool_nr = init_toolhead_0.lstrip("extruder") if init_toolhead_0.lstrip("extruder")|length != 0 else 0 %} 
       {% set offset =  recovery.hotend_offset[tool_nr|int] %}   
         SET_GCODE_OFFSET {axis}={offset[axis]}      

   {% else %}  # -------------------------------------------------
   
       ### create variable         
        {% for  hotend in  user_vars.toolhead  %}
           {% set tool = user_vars.toolhead[hotend].0 %}
           {% set _dummy = init.update(  {hotend|int: tool } ) %}
        {% endfor  %}   
        
   {% endif %}  # -------------------------------------------------    

       ### define load/unload params for multi hotend  
        {% set _dummy = init.update(  {'unload': 40 , 'load': 60,  'speed' : 25} ) %}
        
       ### define params for parking toolhead > distance 20 mm from endstop         
        {% if 'dual_carriage' in printer['motion_report'].steppers %}
               {% set axis = printer.configfile.settings.dual_carriage.axis %}  
               {% set endstop_0 =  ((printer.configfile.config[('stepper_'+axis)].position_endstop )|int + 20 )   %}
               {% set endstop_1 =  ((printer.configfile.config['dual_carriage'].position_endstop)|int - 20 )  %}
               
               {% set _dummy = init.update( {'parking': [endstop_0, endstop_1 ] , 'feedrate':30000  } ) %}
           
          {% else %}
              {% set endstop_0 =  ((printer.configfile.config[('stepper_x')].position_endstop )|int + 20 )  %}
              {% set _dummy = init.update( {'parking': [endstop_0 ] , 'feedrate':30000  } ) %}
     
         {% endif %}   
       
         
         ### save / update variable
         SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
              {action_respond_info("Creating a list of variables for multi hotend")}     
      

#####################################################################
# PRINTER MULTI_HOTEND MANAGEMENT
# Function description: 
#####################################################################
#
# Detects and automatically replaces the filament 
# in a multi-hotend type: xx IN 1 OUT
#
#####################################################################

[gcode_macro MULTI_HOTEND]  
description:  MULTI_HOTEND  EXTRUDER=extruder
gcode:

        {% set user_vars = printer["gcode_macro VARIABLE"] %}       

        {% set act_extruder = printer.toolhead.extruder %} 
        {% set act_carriage = 0 if act_extruder  in user_vars.toolhead[0] else 1 %}  

        {% set target_extruder = params.EXTRUDER|default("extruder") %}
        {% set target_carriage = 0 if target_extruder  in user_vars.toolhead[0] else 1 %}  
     
          # {action_respond_info("target : %s  toolhead: %s" % (target_extruder,target_carriage))}     
  
     {% if target_extruder != user_vars.multi_hotend[target_carriage] %}  

           ### parking toolhead     
                    MULTI_HOTEND_PARKING   EXTRUDER={target_extruder}     
                   
            ###  unload filament > user_vars.multi_hotend[target_carriage] 
                    # {action_respond_info("unload : %s" %  unload_extruder )}         
                    MULTI_UNLOAD_FILAMENT  EXTRUDER={target_extruder}
                    
            ### pause
                    G4 P2000      
         
            ###  load filament   > target_extruder
                    # {action_respond_info("load : %s" %  target_extruder )}   
                    MULTI_LOAD_FILAMENT  EXTRUDER={target_extruder}           
         
           ### pause
                    G4 P2000                          
                    
            ### restore parking toolhead     
                    MULTI_HOTEND_RESTORE_PARKING  EXTRUDER={target_extruder}
   
    {% endif %} 
       # {action_respond_info("multi_hotend : %s" %  init )}     
        
             
#####################################################################
[gcode_macro MULTI_UNLOAD_FILAMENT]  
description:  MULTI_UNLOAD_FILAMENT  EXTRUDER=extruder
gcode:

        {% set user_vars = printer["gcode_macro VARIABLE"] %} 
        {% set name = "multi_hotend" %}    # name variable
        {% set init = user_vars.multi_hotend %}     # default preset  
        
        {% set target_carriage = 0 if params.EXTRUDER|default("extruder")  in user_vars.toolhead[0] else 1 %}  
        {% set unload_extruder = user_vars.multi_hotend[target_carriage] %}    
        
      ### extruder activation          
          ACTIVATE_TOOL EXTRUDER={unload_extruder}        
         
          {% if printer[unload_extruder].can_extrude | lower == 'true' 
               and  printer['virtual_sdcard'].is_active == true %}
             G92 E0
             G1 E-{user_vars.multi_hotend.unload}  F{ (user_vars.multi_hotend.speed * 60)|int }
          {% endif %}   
    

 #####################################################################
[gcode_macro MULTI_LOAD_FILAMENT]  
description:  MULTI_LOAD_FILAMENT  EXTRUDER=extruder
gcode:

        {% set user_vars = printer["gcode_macro VARIABLE"] %}  
        {% set name = "multi_hotend" %}    # name variable
        {% set init = user_vars.multi_hotend %}     # default preset  

        {% set target_extruder = params.EXTRUDER|default("extruder") %}
        {% set target_carriage = 0 if target_extruder in user_vars.toolhead[0] else 1 %}  
            
        ### extruder activation          
           ACTIVATE_TOOL EXTRUDER={target_extruder}  
          
          {% if printer[target_extruder].can_extrude | lower == 'true' 
               and  printer['virtual_sdcard'].is_active == true %}
             G92 E0
             G1 E{user_vars.multi_hotend.load}  F{(user_vars.multi_hotend.speed* 60)|int }
          {% endif %}    

        ### update variable after load filament      
         
          {% set _dummy = init.update( {target_carriage|int : target_extruder} ) %}

         ### save variable
           SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
           SAVE_VARIABLE VARIABLE={name} VALUE="{init}"


 #####################################################################
[gcode_macro MULTI_HOTEND_PARKING]  
description:  MULTI_HOTEND _PARKING   EXTRUDER=extruder   POS=position  ( default is endstop + 20 mm )
gcode:     
 
         {% set user_vars = printer["gcode_macro VARIABLE"] %}  
         {% set target_extruder = params.EXTRUDER|default("extruder") %}
         {% set target_carriage = 0 if target_extruder  in user_vars.toolhead[0] else 1 %}           
         {% set parking_pos = params.POS|default(user_vars.multi_hotend.parking[target_carriage])  %}  
             
         {% set axis =  printer.configfile.settings.dual_carriage.axis  
                       if 'dual_carriage' in printer['motion_report'].steppers  
                          else 'x' %}
       
    
       {%  set axis_pos = printer.gcode_move.gcode_position[axis] %}
         
        ### create variable 'gcode_position'
        {% set gcode_position = user_vars.multi_hotend %}
        {% set _dummy = gcode_position.update( {'gcode_position':{ axis: axis_pos|float }}  ) %}
           SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=multi_hotend  VALUE="{gcode_position}" 
  
  
         ### parking the active carriage to position 
             G1 {axis + ( parking_pos|string)}  F{user_vars.multi_hotend.feedrate}  
               
               
 #####################################################################
[gcode_macro MULTI_HOTEND_RESTORE_PARKING]  
description:  MULTI_HOTEND _RESTORE_PARKING    EXTRUDER=extruder 
gcode:     
 
        {% set user_vars = printer["gcode_macro VARIABLE"] %}  
            
        {% set axis = printer.configfile.settings.dual_carriage.axis  
                     if 'dual_carriage' in printer['motion_report'].steppers  
                     else 'x' %}           
        
    ### restore position befor park carrige  
        {% set gcode_position = user_vars.multi_hotend.gcode_position %}
        {%  set axis_pos = gcode_position[axis]  %}              
             G1 X{axis_pos|string}  F{user_vars.multi_hotend.feedrate}    

     ### delete variable 'gcode_position'
        {% set gcode_position = user_vars.multi_hotend %}
        {% set _dummy = gcode_position.pop( 'gcode_position' ) %}
           SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=multi_hotend  VALUE="{gcode_position}"          
               
               
               
               
    
     
