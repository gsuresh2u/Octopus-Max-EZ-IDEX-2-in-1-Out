 # This file contains a configuration snippet for users variables 
# for all [gcode_macro]
#
# See docs/Config_Reference.md for a description of parameters.

#####################################################################
# All variables in this configuration, KLIPPER merges
# into one configuration  file [gcode_macro VARIABLE] .
#
# ATTENTION:
# If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
description: HELP: for list of variables send GET_USER_VARIABLE
gcode:

###  ------ write all user variables under this line ------ ###
#variable_my_name : my_value 

  
variable_tmp : 0        # independent temporary variable
variable_restore_variable : ['hotend_offset']   
                            
# e.g. :
# restore_variable = [ 'all' ]   - restore all variables from SD card
# restore_variable = [ 'none' ]  - do not restore variables from SD card
# restore_variable : [ 'active', 'hotend_offset', 'tool_change']  - restore only defined variables from SD card


#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _Z_INIT_RESTORE_USER_VARIABLE]          
gcode:
             
     ### restore variable from SD card (only defined variables)
     {% if printer.save_variables.variables.restore_variable is defined %}
         RESTORE_USER_VARIABLE
     {% endif %}
   
  
#####################################################################
###       GET / SAVE / RESTORE VARIABLE MANAGMENT                 ###     
#####################################################################


[gcode_macro GET_USER_VARIABLE]
description: Debug: Print entries of the printer object containing gcode_macro
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %}
 
  {% set out = [] %} 
     {% for parameter, value in printer["gcode_macro VARIABLE"].items()|sort %}
       {% set _dummy = out.append("printer['gcode_macro VARIABLE'].%s = %s" % (parameter, value)) %}
    {% endfor %} 
 
  {action_respond_info(out|join("\n"))}


#####################################################################

[gcode_macro DUMP_LIST]
gcode:
 
    {% set user_vars = printer["gcode_macro VARIABLE"] %}
    {% set value = false if printer.save_variables.variables.dump_list else true %} 

    # enables/disables  variable listing
     SAVE_VARIABLE VARIABLE=dump_list VALUE={value}
    {action_respond_info("set > %s " % value )}
 
 
#####################################################################

[gcode_macro SAVE_USER_VARIABLE]
description:  SAVE_USER_VARIABLE VAR=<name>
gcode:
 
    {% set user_vars = printer["gcode_macro VARIABLE"] %}

    {% if params.VAR is defined %} 
      {% set parameter = params.VAR|lower %}
        {% if parameter in user_vars %}
          {% set  value = user_vars[parameter] %}
          ### save variable to SD card file 
          SAVE_VARIABLE VARIABLE={parameter} VALUE="{value}"
        {% else %}
          {action_respond_info(" VAR=%s not in user variable." % params.VAR )}
       {% endif %}
    {% else %} 
      ### read all variable  
      {% for parameter,value in printer["gcode_macro VARIABLE"].items()|sort %}
        ### save variable to SD card file 
        SAVE_VARIABLE VARIABLE={parameter} VALUE="{value}"              
      {% endfor %}  
    {% endif %}

       
#####################################################################  
    
[gcode_macro RESTORE_USER_VARIABLE]
description: 
gcode:   
    
  {% set recovery = printer.save_variables.variables %}

  {% if 'none' in recovery.restore_variable %}
        ### do not restore variables
        {action_respond_info("No variables were restored !")}    

  {% elif 'all' in recovery.restore_variable %}
       ###  restore all variable
        {% for parameter,value in printer["gcode_macro VARIABLE"].items()|sort %}
         {% if parameter in recovery %}
            ### restore variable from SD card           
            {% set value = recovery[parameter] %}
            c
           {% endif %}
         {% endfor %} 
         {action_respond_info("All variables restored from SD card !")}     
    
    {% else %}
       ###  restore define variable
       {% for parameter,value in printer["gcode_macro VARIABLE"].items()|sort %}
         {% if parameter in recovery.restore_variable %}
            ### restore variable from SD card           
            {% set value = recovery[parameter] %}
              SET_GCODE_VARIABLE  MACRO=VARIABLE   VARIABLE={parameter}   VALUE="{value}"
          {% endif %}
       {% endfor %} 
        {action_respond_info("From SD card restored this variables : %s" % recovery.restore_variable )}     
    {% endif %}



# ----------------- only  for testing  SAVE / RESTORE ----------------------------  

[gcode_macro DELETE_USER_VARIABLE]
gcode:
     
     {% for variable in printer["gcode_macro VARIABLE"]|sort %}  
         {% set value = { }  %}
           SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE={variable}   VALUE="{value}" 
     {% endfor %} 


[gcode_macro DELETE_SAVE_VARIABLE]
description: for delete send:  DELETE_SAVE_VARIABLE YES=  
gcode:

  {% if params.YES is defined  %}
      {% for variable in printer.save_variables.variables|sort %}
        {% set value =  { }  %}     
         SAVE_VARIABLE VARIABLE={variable} VALUE="{value}"    
      {% endfor %}  
        {action_respond_info(" DELETED ")}
   {% else %}
        {action_respond_info(" NOT DELETED - for delete send:  DELETE_SAVE_VARIABLE YES= ")}
   {% endif %}
  

# -----------------------------------------------------------------------------------

