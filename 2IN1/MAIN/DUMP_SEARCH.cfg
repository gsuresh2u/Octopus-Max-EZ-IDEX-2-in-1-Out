[gcode_macro DUMP_PRINTER_PARAM]
description: Debug: Print entries of the printer object without gcode_macro
gcode:
  {% set out = [] %}
  {% for object in printer|sort %}
    {% if object != 'configfile' and 'gcode_macro' is not in object %}
      {% for parameter, value in printer[object].items()|sort %}
        {% set _dummy = out.append("printer['%s'].%s = %s" % (object, parameter, value)) %}
      {% endfor %}      
    {% endif %}
  {% endfor %}
  {% if out|length == 0 %}{% set _dummy = out.append("Nothing found for \"DUMP_PRINTER_PARAM %s\"" % rawparams) %}{% endif %}
  {action_respond_info(out|join("\n"))}


[gcode_macro DUMP_MACRO_GCODE]
description: Debug: Print entries of the printer object containing gcode_macro
gcode:
  {% set out = [] %}
  {% for object in printer|sort %}
    {% if object != 'configfile' and 'gcode_macro' is in object %}
      {% for parameter, value in printer[object].items()|sort %}
        {% set _dummy = out.append("printer['%s'].%s = %s" % (object, parameter, value)) %}
      {% endfor %}       
    {% endif %}
  {% endfor %}
  {% if out|length == 0 %}{% set _dummy = out.append("Nothing found for \"DUMP_GCODE %s\"" % rawparams) %}{% endif %}
  {action_respond_info(out|join("\n"))}

### --------------------------------

[gcode_macro DUMP_PARAMETERS]
description: Debug: Print all entries of the printer object
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['bed_mesh','configfile'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
      {% else %}
        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}



[gcode_macro DUMP_CONFIG]
description: Debug: Print all entries of the printer config object
#### DUMP_CONFIG s=extruder
gcode:
 {% set show = params.S|lower %}
 {% set parameters = namespace(output = '') %}
  {% for name1 in printer.configfile.config %}
      {% if name1 is in show %}
      {% for name2 in printer.configfile.config[name1] %}
              {% set param = "printer.configfile.config['%s'].%s = %s" % (name1, name2, printer.configfile.config[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endfor %}
    {% endif %}
  {% endfor %}
  {action_respond_info(parameters.output)}



#### DUMP_SETTINGS s=extruder
#### DUMP_SETTINGS S='tmc2209 extruder' 

[gcode_macro DUMP_SETTINGS]
description: Debug: Print all entries of the printer settings object
gcode:
  {%if 'S' in params %}
    {% set show = [params.S] %}
    {% set parameters = namespace(output = '') %}
    {% for name1 in printer.configfile.settings %}
      {% if name1 is in show %}
        {% for name2 in printer.configfile.settings[name1] %}
          {% set param = "printer.configfile.settings['%s'].%s = %s" % (name1, name2, printer.configfile.settings[name1][name2]) %}
          {% set parameters.output = parameters.output +  param + "\n" %}
        {% endfor %}
      {% endif %}
    {% endfor %}
    {action_respond_info(parameters.output)}
  {% else %}
    {action_respond_info("WARNING: parameter S needed call e.g. DUMP_SETTINGS S='printer'")}
  {% endif %}



[gcode_macro SEARCH_VARS]
#### SEARCH_VARS s=extruder
#### Additionally, omitting the "s" parameter will just dump out literally everything
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}