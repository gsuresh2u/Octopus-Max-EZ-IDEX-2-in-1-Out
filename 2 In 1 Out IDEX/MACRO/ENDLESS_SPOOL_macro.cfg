# This file contains a configuration snippet for ENDLESS SPOOL MODE.
#
#
# Define HW configuration in printer.cfg
# 
# For runout filament sensor define this name
# ... 'extruder', 'extruder1', 'extruder2', 'extruder3' ... etc
#

#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_endless_spool: { }     
variable_filament_sensor:  {  } 

# e.g. filament_sensor {'defined': True,
#                        'motion': ['extruder', 'extruder1'],
#                        'switch': ['filament', 'filament1'],
#                        'count': 4}

# e.g. endless_spool =  { 'enable': False , 'retract':1,  'extrude':2 }          

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _INIT_ENDLESS_SPOOL]  
gcode:

    {% set user_vars = printer["gcode_macro VARIABLE"] %} 

   ### init defautl variable
     {% set name = "endless_spool" %}    #  name variable 
     {% set init = { } %}     # default preset   
       
     {% set _dummy = init.update( { 'enable': False, 'retract':1,  'extrude':2 } )%}
       
      ### save variable 
  SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"  
   
  {action_respond_info("Creating a list of variables for endless spool mode.")}

#############################################################

[gcode_macro _INIT_FILAMENT_SENSOR] 
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %}
   
   ### update filament_sensor variable by configuration of printer  

   {% set name = "filament_sensor" %}      # name variable
   {% set init = { 'defined' : False } %}  # default preset 
   {% set ns = namespace(index=1|int) %}
   
   ### search filament sensor 
    {% for object in printer.configfile.config|sort %}        

       {% if object.split(' ')[0] == 'filament_switch_sensor' %}   
           {% set type = 'switch' %}           
       {% elif object.split(' ')[0] == 'filament_motion_sensor' %} 
           {% set type = 'motion' %}           
       {% else %}
            {% set type = 'false' %}              
       {% endif %}  

       ### update variable  
       {% if type != 'false' %}  
          {% set _dummy = init.update(  {'defined' : True } ) %}         
             {% set name =  (object.split(' ')[1]) %}
            
        {% if type == 'motion' %}  
            {% set _dummy = init.update({ 'motion': [name]})  if init.motion is not defined  else  init.motion.append(name) %}
        {% elif type == 'switch' %}  
            {% set _dummy = init.update({ 'switch': [name]})  if init.switch is not defined  else  init.switch.append(name) %}
        {% endif %}   

        {% set _dummy = init.update({ 'count': ns.index })  %}
        {% set ns.index = ns.index + 1 %}

       {% endif %}
     {% endfor %}   

     ### save variable 
     SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"

    ### get info 
    # {action_respond_info("%s = %s" % (name,init))} 
     {action_respond_info("Creating a list of variables for filament sensor." )} 

  
#####################################################################
# ENDLESS SPOOL MODES  - MANAGEMENT
# Function description: 
#
# TRIGGER_RUNOUT SENSOR=extruder
#
#####################################################################

[gcode_macro SET_ENDLESS_SPOOL] 
description: Enable Endless spool.  SET_ENDLESS_SPOOL ENABLE=[0|1] 
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %}
   {% set param_enable = True if params.ENABLE|int == 1 else False %}  
   
   {% if user_vars.tool|length >= 2 and user_vars.filament_sensor.defined %}
     {% set init = user_vars.endless_spool %}       
     {% set _dummy = init.update( { 'enable': param_enable } ) %} 
     ### update variable 
     SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=endless_spool VALUE="{init}" 
   {% else %}
     RESPOND MSG="Configuration is not for Endless spool mode"
   {% endif %}
      
   


#####################################################################

[gcode_macro TRIGGER_RUNOUT]
description: Triggers the extruder out of filament.
gcode:

     ### params.SENSOR= <config name>       
     #  'extruder', 'extruder1', 'extruder2', 'extruder3'
     
      {% set user_vars = printer["gcode_macro VARIABLE"] %}    
    
      {% set  trig_sensor =  params.SENSOR |string %}  
      {% set  act_extruder = (printer.toolhead.extruder)|string %} 
    
   {% if trig_sensor == act_extruder %}
    
        {% if user_vars.endless_spool.enable %}     
         ### check for all extruders ( seting first filament detected ) 
          {% set ns = namespace(detect=false, extruder=false) %} 

          {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
            {% if 'extruder' in tool and ns.detect|lower == "false" %}  
             {% set type = 'motion' if  tool  in  user_vars.filament_sensor.motion  else 'switch'  %}  
             {% set ns.detect = printer[("filament_%s_sensor %s" %  (type,tool))].filament_detected %} 
             {% set ns.extruder = tool if ns.detect|lower == "true" else false %}              
           {% endif %}
          {% endfor %}
                    
         {% if ns.extruder|lower != "false" %}
             REDEFINE_NEW_TOOL   EXTRUDER={ns.extruder}	                     
         {% else %}
            ### parking toolhead and pause print 
            RESPOND MSG="Warning : The other toolhead is out of filament too !"
           _WARNING_FILAMENT
         {% endif %}	
            
        {% else %}                          
            ### parking toolhead and pause print 
             RESPOND MSG="Warning : active tool "{act_extruder}" is out of filament !"
             _WARNING_FILAMENT
                       
       {% endif %}
       
     {% else %}
              RESPOND MSG="Sensor "{trig_sensor}" not detected filament !"  
     {% endif %}                      

#####################################################################
 
[gcode_macro _WARNING_FILAMENT] 
gcode:  

      ### pause printing and warning info / sound 

          {% if 'gcode_macro M601' in  printer %}
              M601   ### park toolhead and pause print 
          {% else %}
              PAUSE 
          {% endif %}
                       
          {% if 'gcode_macro SET_BEEPER' in  printer %}
             SET_BEEPER R=4   ## repeat beep 4x
          {% endif %}  
                        
          RESPOND MSG="Please check filament and resume printing."         
    
#####################################################################
# REDEFINE_NEW_TOOL  - MANAGEMENT
# Function description: 
#
#####################################################################

[gcode_macro REDEFINE_NEW_TOOL] 
description: Checks whether the head of the new tool has been heated to the printing temperature. 
gcode:
       
        ### params.EXTRUDER = 'extruder', 'extruder1', 'extruder2', 'extruder3'

        {% set user_vars = printer["gcode_macro VARIABLE"] %}
  
         ### active tool info        
         {% set active_extruder = printer.toolhead.extruder %}
         {% set act_temp = printer[active_extruder].target %}     

          ### new tool info
         {% set new_extruder = params.EXTRUDER %}
         {% set temp_new_extruder = printer[new_extruder].target %}

         ### actual position Z befor tool change
         {% set trigger_z = printer.toolhead.position.z|float %} 
         
   {% if temp_new_extruder >= act_temp %}
          ### turn off heater active extruder
            G1 E-{user_vars.endless_spool.retract} 
            SET_HEATER_TEMPERATURE HEATER="{active_extruder}" TARGET=0
	        RESPOND MSG="Turn off heating "{active_extruder}	 
           ### set new extruder
            SETINGS_TOOL   EXTRUDER={new_extruder}
            SET_HEATER_TEMPERATURE HEATER="{new_extruder}" TARGET={act_temp} 
    {% else %}           
       ### turn off heater active extruder 
           G1 E-{user_vars.endless_spool.retract} 
           SET_HEATER_TEMPERATURE HEATER="{active_extruder}" TARGET=0
           RESPOND MSG="Turn off heating "{active_extruder}	 	
           
           ### set new extruder
           SETINGS_TOOL   EXTRUDER={new_extruder}
           
          ### heating new extruder and wait
           SET_HEATER_TEMPERATURE HEATER="{new_extruder}" TARGET={act_temp}
           RESPOND MSG="Wait on heating "{new_tool}
           TEMPERATURE_WAIT SENSOR="{new_extruder}" MINIMUM={act_temp - 2.0} MAXIMUM={act_temp + 2.0}
  {% endif %}
       ### extrusion and resume print 
          G1 E{user_vars.endless_spool.extrude} 
          G1 Z{trigger_z}

      ### redefine variable 'tool'
         {% set name = "tool" %}    
         {% set init_tool =  user_vars.tool %}     
          
      ### set new extruder for all empty sensors or set reset extruder for detect sensor
         {% for tool in printer.heaters.available_heaters|sort %} 
            {% if 'extruder' in tool %}  
             {% set tool_nr = (tool.lstrip("extruder") if tool.lstrip("extruder")|length != 0 else 0)|int %}        
             {% set type = 'motion' if  tool in user_vars.filament_sensor.motion  else 'switch'  %}  
             {% set detect = printer[("filament_%s_sensor %s" %  (type,tool))].filament_detected %}    
          
               {% set extruder = new_extruder if not detect else tool %} 
               {% set _dummy = init_tool.update( { tool_nr : extruder } )  %}
           
            {% endif %}
         {% endfor %}                    
      
         SET_GCODE_VARIABLE MACRO=VARIABLE    VARIABLE={name}  VALUE="{init_tool}"
         RESPOND MSG="Set new tool "{new_extruder}
        