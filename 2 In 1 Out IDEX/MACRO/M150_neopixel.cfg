# This file contains a configuration snippet for M150 
#
# See docs/Config_Reference.md for a description of parameters.

#####################################################################
# All variables in this configuration, KLIPPER merges
# into one configuration  file [gcode_macro VARIABLE] .
#
# ATTENTION:
# If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_neopixel :   { } 

# e.g.  { 'index' : { 0: 'cfg-name' }, 'RGB': {0:'0,0,0'} }   # e.g. { 'menu': { 'active': 0 }

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

 
[gcode_macro _INIT_NEOPIXEL]          
gcode:
   
    {% set user_vars = printer["gcode_macro VARIABLE"] %}

   ### define config <name> neopixel for discard from variables 
   {% set discard_neopixel = ['mks_mini12864'] %}   ; e.g. LED for display MKS MINI 12864

    {% set neopixel = { 'enable': false } %}
    {% set ns = namespace(nr_neopixel=0|int, enable=0|int ) %}
  
    {% for object in printer.configfile.config|sort %}        
       {% if 'neopixel ' is in object  %}             
          {% if object.split(' ')[0] == 'neopixel' %} 

         {% if neopixel.index is not defined %}             
             {% set _dummy = neopixel.update( {'index': {  }} ) %}
         {% endif %} 

         {% if neopixel.RGB is not defined %}             
            {% set _dummy = neopixel.update( {'RGB': {  }} ) %}
         {% endif %}  
         
         {% if (object.split(' ')[1]) not in discard_neopixel %} 
            {% set _dummy = neopixel.index.update( { ns.nr_neopixel: (object.split(' ')[1])} ) %}
            {% set _dummy = neopixel.RGB.update( { ns.nr_neopixel: '0,0,0'} ) %}
            {% set ns.nr_neopixel =  ns.nr_neopixel + 1 %} 
            {% set ns.enable = 1 %} 
         {% else %} 
            {action_respond_info("[neopixel %s] has been discard from the list of variables" % (object.split(' ')[1]))}
         {% endif %}

        {% endif %}
     {% endif %} 
   {% endfor %}  

   {% if ns.enable == 1 %}
     {% set _dummy = neopixel.update( { 'enable': true } ) %}  
   {% endif %}

    ### init variable for LCD menu : 'menu': { 'active': 0}
  {% if neopixel.index is defined %} 
    {% if printer.configfile.settings['menu __main __user __neopixel'] is defined %}  
      {% set _dummy = neopixel.update( { 'menu': { 'active': 0}} ) %}
    {% endif %}
   {% endif %}

     SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=neopixel VALUE="{neopixel}"
     {action_respond_info("Creating a list of variables for neopixel ")}
     


#####################################################################
# PRINTER M150 MANAGEMENT
# Function description: 
#####################################################################
#
# M150 [S<strip>] [B<intensity>] [R<intensity>] [U<intensity>] [I<index>] [P<intensity>] 
#
# [R<intensity>]	Red component from 0 to 255
# [U<intensity>]	Green component from 0 to 255
# [B<intensity>]	Blue component from 0 to 255
# [P<intensity>]   Brightness from 0 to 255 
# [I<index>]       Index from 0 to n  (Requires NEOPIXEL LED)
# [S<strip>]       Index strip 0 to n (Requires NEOPIXEL LED)
#
# send only g-code M150 to All Neopixel LED turn off
#
#####################################################################

[gcode_macro M150]  
description:  Set color: M150 R<> U<> B<> P<> I<> S<>
gcode:

        {% set user_vars = printer["gcode_macro VARIABLE"] %} 
        
       {% set param = [] %}

       {% for key in params %}
           {% if key == "I" %} 
          {% set _dummy = param.append(key + "=" + (params[key]|int +1)|string) %}
           {% elif key == "S" %} 
           {% set _dummy = param.append(key + "=" + (params[key]|int )|string) %}
        {% else %} 
            {% set _dummy = param.append(key + "=" + (params[key]|float / 255 )|string) %}
        {% endif %}
      {% endfor %}

   ### redirect to SET_NEOPIXEL macro  
   SET_NEOPIXEL {param|join(" ")} 
    
#####################################################################
# PRINTER SET_NEOPIXEL MANAGEMENT
# Function description: 
#####################################################################
# 
# STRIP=0               ... strip index 0
# LED=OFF               ... turn OFF Neopixel 
#     ON                ... turn ON  Neopixel - set white color
#     RED,BLUE,GREEN    ... set color
# RGB=255,255,255       ... define RGB colors
# 
#####################################################################
 
[gcode_macro SET_NEOPIXEL]
description: Set Neoixel: SET_NEOPIXEL  STRIP=0  LED=ON,OFF,RED,GREEN,BLUE or RGB=<255,255,255>
gcode:
 
    {% set user_vars = printer["gcode_macro VARIABLE"] %} 
    {% set neopixel = user_vars.neopixel %}
    {% set color =  '0,0,0' %}
 
    ### Get parameters LED
    {% set led = params.LED|upper if params.LED and params.LED|upper is in ['ON','OFF','RED','GREEN','BLUE'] else 'NDF' %}
    
    ### Get parameters R,U,B,P,I,S from redirect g-code M150 
    {% set red = params.R|default(0)|float  %}
    {% set green = params.U|default(0)|float  %}
    {% set blue = params.B|default(0)|float  %}    
    {% set brightness = params.P|default(1)|float  %} 
    {% set led_nr = params.I|default(1)|int %}
   
    
    {% if params.STRIP is defined  %}
       {% set strip =  params.STRIP|default(0)|int  %}
    {% elif  params.S is defined  %}
       {% set strip =  params.S|default(0)|int  %}
     {% else %}
       {% set strip =  0|int  %}
    {% endif %}     
        
    {% set neopixel_name =  neopixel.index[strip] %}
       
    ### safety test for INDEX led strip
    {% set led_strip = "%s %s" % ('neopixel'|trim, neopixel_name|trim) %} 
    {% set max_led = printer.configfile.config[(led_strip)].chain_count|int %} 
    {% if led_nr >= max_led %}      
       {% set led_nr = max_led %}       
    {% endif %}     
 
    ### Set LED from SET_NEOPIXEL
    {% if led  == 'ON' %}
        SET_LED LED={neopixel_name} SYNC=0 RED=1 GREEN=1 BLUE=1      
        {% set color =   '255,255,255' %}        
    {% elif led  == 'RED' %}
        SET_LED LED={neopixel_name} SYNC=0 RED=1 GREEN=0 BLUE=0     
        {% set color =   '255,0,0' %}
    {% elif led  == 'GREEN' %}
        SET_LED LED={neopixel_name} SYNC=0 RED=0 GREEN=1 BLUE=0    
        {% set color =   '0,255,0' %}
    {% elif led  == 'BLUE' %}
        SET_LED LED={neopixel_name} SYNC=0 RED=0 GREEN=0 BLUE=1       
        {% set color =   '0,0,255' %}

    ### set LED from g-code M150
    {% elif params.P is defined %}
       SET_LED LED={neopixel_name} SYNC=0 RED={red*brightness} GREEN={green*brightness} BLUE={blue*brightness}  
      {% set color =   ("%s,%s,%s" % ( (red*brightness*255)|int , (green*brightness*255)|int , (blue*brightness*255)|int )) %}
    {% elif params.I is defined %}
       SET_LED LED={neopixel_name} SYNC=0 INDEX={led_nr} RED={red*brightness} GREEN={green*brightness} BLUE={blue*brightness} 
       {% set color = '0,0,0' %}
    
    ### Set LED from SET_NEOPIXEL <RGB>
    {% elif params.RGB is defined and params.RGB.split(",")|length == 3 %}
    {% set color = params.RGB %}
    {% set R = params.RGB.split(",")[0]|float /255 %}
    {% set G = params.RGB.split(",")[1]|float /255 %}
    {% set B = params.RGB.split(",")[2]|float /255 %}       
         SET_LED LED={neopixel_name} SYNC=0 RED={R} GREEN={G} BLUE={B}        
         # {action_respond_info("%s , %s , %s" % (R,G,B))}

    {% elif led  == 'OFF' %}
        SET_LED LED={neopixel_name} SYNC=0 RED=0 GREEN=0 BLUE=0 
        {% set color =   '0,0,0' %}
      
     {% else %} 
       ## all LED Neopixel turn off
          _ALL_NEOPIXEL_OFF       
     {% endif %}  
     
            
      ### update neopixel variable 'RGB'        
       {% set _dummy = neopixel.RGB.update( { strip : color} ) %} 
       SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=neopixel VALUE="{neopixel}"

#####################################################################

[gcode_macro _ALL_NEOPIXEL_OFF]
description: 
gcode:

       {% set user_vars = printer["gcode_macro VARIABLE"] %} 
       {% set neopixel = user_vars.neopixel %}
    
      {% for strip in  user_vars.neopixel.index|sort %} 
           SET_LED LED={neopixel.index[strip]} SYNC=0 RED=0 GREEN=0 BLUE=0
           ### update neopixel variable 'RGB'           
           {% set _dummy = neopixel.RGB.update( { strip : '0,0,0'} ) %} 
           SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=neopixel VALUE="{neopixel}"
            
      {% endfor %}


#####################################################################

[gcode_macro _NEOPIXEL_COUNTDOWN]
description: Set:  NEOPIXEL_COUNTDOWN  S=<strip> RGB=<255,255,255>
gcode:

    {% set user_vars = printer["gcode_macro VARIABLE"] %}

 {% if user_vars.neopixel.enable %}
 
   ### set LED countdown for NEOPIXEL   
    {% set strip = user_vars.neopixel.index[params.S|default(0)|int]  %}
    {% set ledcount =  printer.configfile.config[("neopixel %s" % strip)].chain_count|int%} 
    
       {% if params.RGB is defined and params.RGB.split(",")|length == 3 %}
          {% set R = params.RGB.split(",")[0]|float /255 %}
          {% set G = params.RGB.split(",")[1]|float /255 %}
          {% set B = params.RGB.split(",")[2]|float /255 %} 
       {% else %}
          {% set R = 1.0 %}
          {% set G = 1.0 %}
          {% set B = 1.0 %}
      {% endif %} 
 
        SET_LED LED={strip} RED=0 GREEN=0 BLUE=0
    
        {% for led in range(1, ledcount|int +1 )  %}
            {% if (ledcount|int ) >= led %}
                SET_LED LED={strip} RED={R} GREEN={G} BLUE={B} INDEX={ led }
                 G4 P{(15000/ledcount)}  # 15s for the number of LEDs                  
            {% endif %}
        {% endfor %}
      
        SET_LED LED={strip} RED=0 GREEN=0 BLUE=0

 {% elif 'display' in printer.configfile.config %}
 
    ### set countdown for LCD display
        {% for countdown in range(1, 15)  %}
           {% if (15) >= countdown %}
              {% set count = 15 - countdown %}
              M117 Countdown :{count}
              G4 P1000                   
           {% endif %}            
       {% endfor %}
       
       UPDATE_DELAYED_GCODE ID=clear_display DURATION=5   

 {% endif %}        


[delayed_gcode clear_display]
gcode:
            M117
    
        