#####################################################################
#  Variable for this configurations
#  ATTENTION: If the variable already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_offset_temp: { }

# e.g. { 'extruder': 0, 'extruder1': 0 ,...}   

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _INIT_OFFSET_TEMP]
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %} 
   
  ### init defautl variable
  {% set name = "offset_temp" %}    # name variable
  {% set init = { } %}     # default preset   
  
   {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters  
    {% if 'extruder' in tool %}
      {% set _dummy = init.update({tool: 0}) %}      
    {% endif %}
  {% endfor %}
  
   ### save variable 
   SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"  
   
  {action_respond_info("Creating a list of variables for macro M104 ")}

##########################################################
# TOOL HEATERS MANAGEMENT 
# Redefine G-code command M104 and M109 
#
#  macro M104 / M109 uses variable:
#  printer["gcode_macro VARIABLE"].tool 
#  defined as =  {0: 'extruder', 1: 'extruder1', 2: 'extruder2', 3: 'extruder3'}
#
#  printer["gcode_macro VARIABLE"].offset_temp 
#  defined as =  {'extruder':0, 'extruder1':0, 'extruder2':0, 'extruder3':0 }
#
##########################################################

[gcode_macro M104]
rename_existing: M104.1
description: Overide "M104" to allow multiple extruders
gcode:

    {% set user_vars = printer["gcode_macro VARIABLE"] %} 
    {% set active_tool = printer.toolhead.extruder.lstrip("extruder") if printer.toolhead.extruder.lstrip("extruder")|length != 0 else 0 %}
    {% set target_tool = params.T|default(active_tool)|int %}
  
     
  {% if user_vars.tool |length  <  target_tool + 1 %}
     {action_respond_info("The tool T%s is not defined for extruder." % (target_tool))} 
  {% else %}
   {% set default_heater = user_vars.tool[target_tool] %} 
   {% set temp = params.S|default(0)|float %} 
     SET_TOOL_HEATER E={default_heater} S={temp} WAIT='False'
  {% endif %}

#####################################################################

[gcode_macro M109]
rename_existing: M109.1
description: Overide "M109" to allow multiple extruders
gcode:

    {% set user_vars = printer["gcode_macro VARIABLE"] %} 
    {% set active_tool = printer.toolhead.extruder.lstrip("extruder") if printer.toolhead.extruder.lstrip("extruder")|length != 0 else 0 %}
    {% set target_tool = params.T|default(active_tool)|int %}
  
  {% if user_vars.tool |length  <  target_tool + 1 %}
     {action_respond_info("The tool T%s is not defined for extruder." % (target_tool))} 
  {% else %}
    {% set default_heater = user_vars.tool[target_tool] %}
    ### accepted R from Marlin G-code
    {% set temp = params.R|default(0)|float if params.R is defined else params.S|default(0)|float %} 
      SET_TOOL_HEATER E={default_heater} S={temp} WAIT='True'
  {% endif %}   


#####################################################################

[gcode_macro SET_TOOL_HEATER]
gcode:

    {% set user_vars = printer["gcode_macro VARIABLE"] %}  

    {% set default_heater = params.E|default('extruder') %}
    {% set temp = params.S|default(0)|float %} 
    {% set wait = params.WAIT|default('False')%} 
 
    ###
    {% set target_offset = user_vars.offset_temp[default_heater]  if temp != 0 else 0 %}

    {% if temp == 0 %}
       ### reset variable offset_temp
         {% set _dummy = user_vars.offset_temp.update({default_heater : 0}) %}        
        SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=offset_temp VALUE="{user_vars.offset_temp}"
    {% endif %}

    {% if 'gcode_macro M605' in printer and user_vars.idex_mode.active in [2,3] %}  ### Duplication, Mirrored mode
         ### set temp for M605 S2/S3 mode   
         SET_HEATER_TEMPERATURE HEATER="{default_heater}" TARGET={temp + target_offset} 
           ### sync heaters 
           {% if printer['gcode_macro SET_SYNC_HEATERS_MODE'] is defined %}   
             SET_SYNC_HEATERS_MODE  WAIT=0
           {% endif %}      

    {% else %}        
      SET_HEATER_TEMPERATURE HEATER="{default_heater}" TARGET={temp + target_offset} 
      {% if wait == 'True' and temp !=0  %}   
        TEMPERATURE_WAIT SENSOR="{default_heater}" MINIMUM={temp - 2.0} MAXIMUM={temp + 2.0}    
      {% endif %}
    {% endif %} 
 
#####################################################################

[gcode_macro SET_TEMP_OFFSET]
description: SET_TEMP_OFFSET T=(tool) R=(offset_temp)
gcode:

    {% set user_vars = printer["gcode_macro VARIABLE"] %}  
    
    {% set act_tool =  printer.toolhead.extruder %}
    {% set act_tool_nr =  act_tool.lstrip("extruder")|int  if act_tool.lstrip("extruder")|length != 0 else  0|int %}
   
    {% set target_tool = params.T|default(act_tool_nr)|int %}
    {% set target_offset = params.R|default(0)|int %}

    {% set default_heater = user_vars.tool[target_tool] %}
    {% set act_temp = printer[default_heater].target |float %}      
           
    {% if target_offset !=0  %}  
        {% if act_temp !=0 and target_offset|abs <= 10  %} 
          {% set temp = act_temp -  user_vars.offset_temp[default_heater]  %}   
           SET_HEATER_TEMPERATURE HEATER="{default_heater}" TARGET={temp + user_vars.offset_temp[default_heater]}
        {% else %}
           RESPOND MSG=" Set temperature first or offset must be range -10 to 10 !"   
           {% set target_offset = 0|int %}
        {% endif %}      
    {% else %}
           {% set temp = act_temp - user_vars.offset_temp[default_heater]  %} 
           RESPOND MSG="Reset offset temp for "{default_heater} 
           SET_HEATER_TEMPERATURE HEATER="{default_heater}" TARGET={temp + target_offset }
    {% endif %}
            
    {% set _dummy = user_vars.offset_temp.update({default_heater: target_offset}) %}
    SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=offset_temp VALUE="{user_vars.offset_temp}"

###########################################################################
[gcode_macro SET_SYNC_HEATERS_MODE]
description: Set both heater + offset temp.
gcode:   

#  {action_respond_info(">>>>> run gcode_macro  SET_SYNC_HEATERS_MODE")}
       
    ### params WAIT = "1" from macro M109 / "0" from macro M104
       
    {% set user_vars = printer["gcode_macro VARIABLE"] %}
    {% set wait_heating = params.WAIT|default(0)|int %}
    
     ### synchronized heaters 
    {% if user_vars.tool|length > 2 %}
     
      ### 2-3 extruders
       {%  set toolhead_0_extr_0   =   user_vars.toolhead[0][0]   %}     
       {%  set toolhead_1_extr_0   =   user_vars.toolhead[1][0]   %}     
       {%  set act_temp_0   =  printer[toolhead_0_extr_0].target|float %}                         
       {%  set both_temp_0 = act_temp_0  +  user_vars.offset_temp[toolhead_1_extr_0] %} 

        ### 4 extruders
       {% if user_vars.tool|length == 4  %}      
           {%  set toolhead_0_extr_1   =   user_vars.toolhead[0][1]   %}     
           {%  set toolhead_1_extr_1   =   user_vars.toolhead[1][1]   %}   
           {% set act_temp_1   =  printer[ toolhead_0_extr_1].target|float %}                         
           {% set both_temp_1 = act_temp_1  +  user_vars.offset_temp[toolhead_1_extr_1] %}            
       {% endif %}

       ### set sync temp    
       {% if act_temp_0 > 0  or  act_temp_1 > 0  %}
               
           ### for 2-3 extruders  
           SET_HEATER_TEMPERATURE HEATER={toolhead_0_extr_0} TARGET={act_temp_0}
           SET_HEATER_TEMPERATURE HEATER={toolhead_1_extr_0} TARGET={both_temp_0}
            {% if wait_heating == 1 %}
             TEMPERATURE_WAIT SENSOR={toolhead_0_extr_0} MINIMUM={act_temp_0 - 2.0} MAXIMUM={act_temp_0 + 2.0}
             TEMPERATURE_WAIT SENSOR={toolhead_1_extr_0} MINIMUM={both_temp_0 - 2.0} MAXIMUM={both_temp_0 + 2.0}
            {% endif %}
        
           {% if user_vars.tool|length == 4  %}    
           ### for 4extruders 
           SET_HEATER_TEMPERATURE HEATER={toolhead_0_extr_1} TARGET={act_temp_1}
           SET_HEATER_TEMPERATURE HEATER={toolhead_1_extr_1} TARGET={both_temp_1}
            {% if wait_heating == 1 %}
             TEMPERATURE_WAIT SENSOR={toolhead_0_extr_1} MINIMUM={act_temp_1 - 2.0} MAXIMUM={act_temp_1 + 2.0}
             TEMPERATURE_WAIT SENSOR={toolhead_1_extr_1} MINIMUM={both_temp_1 - 2.0} MAXIMUM={both_temp_1 + 2.0}
            {% endif %}
           {% endif %}  
           
       {% else %}
          {% set name = "offset_temp" %}    
          {% set upd_init = user_vars.offset_temp %} 
          
          ### set temp tp 0 and reset offset temp  
          SET_HEATER_TEMPERATURE HEATER={toolhead_1_extr_0} TARGET=0
          {% set _dummy = upd_init.update({toolhead_0_extr_0: 0 }) %}
          {% set _dummy = upd_init.update({toolhead_1_extr_0: 0 }) %}                              
           
          {% if user_vars.tool|length == 4  %}   
            SET_HEATER_TEMPERATURE HEATER={toolhead_1_extr_1} TARGET=0
            {% set _dummy = upd_init.update({toolhead_0_extr_1: 0 }) %}
            {% set _dummy = upd_init.update({toolhead_1_extr_1: 0 }) %}
          {% endif %}                  
                        
          ### update 'offset_temp' variables
          SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{upd_init}"                            
                              
       {% endif %}    
                
    {% else %}
         {action_respond_info("Configuration is not valid for synchronized heaters.")}
    {% endif %}

