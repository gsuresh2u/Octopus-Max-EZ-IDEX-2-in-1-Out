# This file contains a configuration snippet for M605 
#  printer using dual carriages (an "IDEX" printer).
#
# See docs/Config_Reference.md for a description of parameters.
#
#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:  

variable_idex_mode : { } 

  # e.g.  { 'active': 1, 'carriage_offset': 0 , 'movespeed': 500, 'feedrate': 30000, 'position': {'dupl_min': 50, 'dupl_max': 120, 'mirrored': 240 } }
 
#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _INIT_IDEX_MODE]
gcode:  

  {% if 'dual_carriage' in printer['motion_report'].steppers %}

    {% set user_vars = printer["gcode_macro VARIABLE"] %} 
    {% set name = "idex_mode" %}    # name variable
    {% set init = { } %}     # default preset       
    
    
    {% set axis = printer.configfile.settings.dual_carriage.axis %} 

    {% if printer.configfile.config['dual_carriage'].safe_distance is defined %}
      {% set dupl_min = (printer.configfile.config['dual_carriage'].safe_distance)|int %}
    {% else %} 
      {% set dupl_min =  ( printer.configfile.config[('stepper_'+axis)].position_min|int) |abs %} 
    {% endif %}

    {% set dupl_max =  ( printer.configfile.config[('stepper_'+axis)].position_max|int / 2) |int  %} 
    {% set mirrored =    printer.configfile.config[('stepper_'+axis)].position_max|int %} 
  
    # {action_respond_info(" axis = %s\n  dupl_min = %s\n  dupl_max  = %s\n  mirrored = %s\n " % (axis,dupl_min,dupl_max,mirrored ))}

    {% set _dummy = init.update( {'active': 1, 'carriage_offset': 0 , 'movespeed': 500, 'feedrate': 30000 } ) %} 
   
    {% if init.position is not defined %}
      {% set _dummy = init.update( { 'position': { } } ) %}                  
    {% endif %}  
    
    {% set _dummy = init.position.update( {'dupl_min': dupl_min, 'dupl_max': dupl_max , 'mirrored': mirrored  } ) %} 

    ### actual BED_MESH_PROFILE 
      {% if 'bed_mesh' in printer %}
          {% if init.bed_mesh is not defined %}
            {% set _dummy = init.update( { 'act_bed_mesh': { } } ) %}                  
          {% endif %}  

       {% set _dummy = init.update( { 'act_bed_mesh': printer['bed_mesh'].profile_name } ) %} 
     {% endif %} 

       ### update the variable
     SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"

 {% endif %}

#####################################################################
# PRINTER M605 - IDEX CARRIAGES MOVMENT MODES MANAGEMENT
# Function description: 
#####################################################################
# M605: Set dual carriage movement mode
#
# Parameters:
# S[mode]
# X[duplication carriage offset] Optional carriage offset for Mode 2
# R[duplication temp offset] Optional temperature difference for Mode 2
#
# Mode
# S0 - Full control mode
# S1 - Auto-park mode (default mode)
# S2 - Duplication mode
# S3 - Mirrored mode  
# 
# 
# Example: M605 S2 X60 R20   - Duplication mode  
#          M605 S3           - Mirrored mode  
#          M605 S1 (or M605) - Auto-park mode (default mode)
#
#####################################################################
 
[gcode_macro M605]
description: Set dual carriage movement mode: M605 S1 [0,2,3,4]
gcode:
     
   {% set user_vars = printer["gcode_macro VARIABLE"] %} 

 ### safety tests befor run macro M605 
  
  {% if 'dual_carriage' not in printer['motion_report'].steppers %}
	# M605 is not available without idex_mode
	RESPOND TYPE="error" MSG="Idex modes are not available for the kinematic or [dual_carriage] section is missing."
  {% elif "xyz" not in printer.toolhead.homed_axes %}
     # xyz is not homed for M605 mode
    RESPOND TYPE="error" MSG="For M605 mode must be home axis first !!"    
  {% else %}  

#-------------------------------------------------------------------------------------------------

   {% set mode = params.S|default(1)|int %}
   {% set offset_dual = params.X|default(user_vars.idex_mode.position.dupl_max)|int %} 
   {% set offset_temp = params.R|default(0)|float %}  
   {% set act_speed = printer.gcode_move.speed %}
 
#-------------------------------------------------------------------------------------------------

  ### safety test for parameter X 
      {% if  offset_dual < user_vars.idex_mode.position.dupl_min  or   offset_dual >  user_vars.idex_mode.position.dupl_max %}
        {action_respond_info("The distance between dual carriages must be %s - %s " % ( user_vars.idex_mode.position.dupl_min, user_vars.idex_mode.position.dupl_max))}
        {% set offset_dual = user_vars.idex_mode.position.dupl_max %} 
        {action_respond_info("Will now be set to : %s " % ( user_vars.idex_mode.position.dupl_max))}
      {% endif %}     

  ### settings the parameter R 
    {% if 'gcode_macro SET_TEMP_OFFSET' in printer %} 
        ### offset temp for 2 extruder (IDEX printer)                
        {% set tool_0   =   user_vars.toolhead[0][0]   %}    # carriage 0 / tool 0  e.g. 'extruder' 
        {% set tool_1   =   user_vars.toolhead[1][0]   %}    # carriage 1 / tool 0  e.g. 'extruder2'  
        {% set _dummy = user_vars.offset_temp.update({tool_0: 0.0}) %}
        {% set _dummy = user_vars.offset_temp.update({tool_1: offset_temp}) %}
                        
        {% if user_vars.tool|length == 4  %}
           ### offset temp for 4 extruder (4EX2 printer)
           {%  set tool_2   =   user_vars.toolhead[0][1]   %}    # carriage 0 / tool 1  e.g. 'extruder1 
           {%  set tool_3   =   user_vars.toolhead[1][1]   %}    # carriage 1 / tool 1  e.g. 'extruder3'          
           {% set _dummy = user_vars.offset_temp.update({tool_2: offset_temp}) %}
           {% set _dummy = user_vars.offset_temp.update({tool_3: offset_temp}) %}          
        {% endif %} 
    {% else %}
       {action_respond_info("The macro SET_TEMP_OFFSET is not defined." )}         
    {% endif %}   

 #-------------------------------------------------------------------------------------------------         
          
  ### Full-control mode S0
    {% if (mode) == 0 %}
      {% set _dummy =user_vars.idex_mode.update( {'active' : 0, 'carriage_offset' : 0} ) %}  
      {% set _dummy =user_vars.dual_carriage.update( {'auto_exchange':False} ) %}  
        RESPOND MSG="Dual-extruder Full-control mode is active" 
      {% set activate_mode = 'PRIMARY' %}


    ### Auto-park mode S1 (default mode)
    {% elif (mode) == 1 %}
      {% set _dummy =user_vars.idex_mode.update( {'active' : 1, 'carriage_offset' : 0} ) %}  
      {% set _dummy =user_vars.dual_carriage.update( {'auto_exchange':True} ) %}  
        RESPOND MSG="Dual-extruder Auto-park mode is active"
      {% set activate_mode = 'PRIMARY' %}
       

    ### Duplication mode S2 
    {% elif (mode) == 2 %}
      {% set _dummy =user_vars.idex_mode.update( {'active' : 2, 'carriage_offset' : offset_dual} ) %}  
      {% set _dummy =user_vars.dual_carriage.update( {'auto_exchange':True} ) %}     
         RESPOND MSG="Duplication mode is active"   
      {% set activate_mode = 'COPY' %}
        
     
    ### Mirrored mode S3
    {% elif (mode) == 3 %}
      {% set _dummy =user_vars.idex_mode.update( {'active' : 3, 'carriage_offset' : user_vars.idex_mode.position.mirrored } ) %}  
      {% set _dummy =user_vars.dual_carriage.update( {'auto_exchange':True} ) %}  
        RESPOND MSG="Mirrored mode is active" 
      {% set activate_mode = 'MIRROR' %}        
 

    {% else %}
      {% set _dummy =user_vars.idex_mode.update( {'active' : 1, 'carriage_offset' : 0} ) %}  
      {% set _dummy =user_vars.dual_carriage.update( {'auto_exchange':True} ) %}  
        RESPOND MSG="mod M605 S"{mode}" does not exist, I set the default mod M605 S1"
      {% set activate_mode = 'PRIMARY' %}

    {% endif %}  

#-------------------------------------------------------------------------------------------------
   ### save name for actual BED_MESH PROFILE  
       {% if 'bed_mesh' in printer and printer['bed_mesh'].profile_name !='' and (mode) in [2,3]  %}
          {action_respond_info("Save BED_MESH profile = %s " % printer['bed_mesh'].profile_name)}
          {% set _dummy = user_vars.idex_mode.update( { 'act_bed_mesh': printer['bed_mesh'].profile_name } ) %} 
       {% endif %} 

   ### reset variable after disable carriage in S2,S3 mode
     {% set _dummy = user_vars.tool_change.update( {'enable' : True } ) %}  
     SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=tool_change  VALUE="{user_vars.tool_change}"  

   ### update  variable
     SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=idex_mode      VALUE="{user_vars.idex_mode}"  
     SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=dual_carriage  VALUE="{user_vars.dual_carriage}"  
     SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=offset_temp    VALUE="{user_vars.offset_temp}"   

    ### Reset all extruder to default 
    DEFAULT_EXTRUDER_SETTINGS

    ### activate IDEX mode
    ACTIVATE_IDEX   MODE={activate_mode}
     G1 F{act_speed}  

 {% endif %}    


#####################################################################

[gcode_macro DEFAULT_EXTRUDER_SETTINGS]
gcode:

     {% set user_vars = printer["gcode_macro VARIABLE"] %}

### reset defautl tool for extruder
    _A_INIT_TOOL

### Reset all extruder movement  
     {% for tool in printer.motion_report.steppers|sort %} ; check for all available steppers
         {% if 'extruder' in tool %} 
           ### desynchronized from all extruder movement  
           SYNC_EXTRUDER_MOTION EXTRUDER={tool}  MOTION_QUEUE=   
           ### restore synchronized extruder movement 
           SYNC_EXTRUDER_MOTION EXTRUDER={tool}  MOTION_QUEUE={tool}   
         {% endif %}
   {% endfor %}

### Reset Switching extruder / hotend
    {%  if 'gcode_macro SWITCHING_EXTRUDER' in  printer  or  'gcode_macro SWITCHING_HOTEND' in  printer %}  
        ACTIVATE_TOOL  EXTRUDER={user_vars.toolhead[1][0]}  
        ACTIVATE_TOOL  EXTRUDER={user_vars.toolhead[0][0]} 
     {% endif %}   

#####################################################################

[gcode_macro ACTIVATE_IDEX]
description: Set the dual-carriages mode.
gcode:

   ### params.MODE=[ PRIMARY | COPY | MIRROR ]

    {% set user_vars = printer["gcode_macro VARIABLE"] %}
    {% set axis = printer.configfile.settings.dual_carriage.axis %} 
    {% set mode = params.MODE|default('FULL_CONTROL') %}
    {% set _dummy = user_vars.tool_change.update( {'enable' : True } ) %}      
    
    {% set systems = 'TOOL'  if 'gcode_macro SWITCHING_EXTRUDER' in  printer  or  'gcode_macro SWITCHING_HOTEND' in  printer
                      else  'EXTRUDER'       %}                 

     
    ### unsync both carriages
    SET_DUAL_CARRIAGE CARRIAGE=0  
    Z_HOP_TOOL
    G28 {axis}     
    SET_GCODE_OFFSET X=0 Y=0 Z=0
    
 {% if mode == 'PRIMARY' %}   
 ### 'PRIMARY'
     {% if 'bed_mesh' in printer and user_vars.idex_mode.act_bed_mesh !='' %}       
       {action_respond_info("Restore BED_MESH profile = %s " % user_vars.idex_mode.act_bed_mesh)}
        BED_MESH_PROFILE LOAD={user_vars.idex_mode.act_bed_mesh}
      {% endif %}
  
     {% if user_vars.dual_carriage.auto_exchange  %} 
      ### move carriage 0 to center bed 
       SET_DUAL_CARRIAGE CARRIAGE=0  
       SET_GCODE_OFFSET X=0 Y=0 Z=0 MOVE=1 MOVE_SPEED={user_vars.idex_mode.movespeed}
       G1 {axis + (user_vars.idex_mode.position.dupl_max)|string} F{user_vars.idex_mode.feedrate}  
       ACTIVATE_{systems}   EXTRUDER={user_vars.toolhead[0][0]}      # carriage 0 / tool 0     
     {% endif %}  
    
  {% else %}  
  ### 'COPY' and 'MIRROR'  

   {% if 'bed_mesh' in printer %}
    {action_respond_info("Disable BED_MESH profile = %s " % user_vars.idex_mode.act_bed_mesh)}
     BED_MESH_CLEAR
   {% endif %}
  
  #--------------------------------- MULTI HOTEND -----------------------------------------------------

    ### filament insertion check for MULTI hotend during printing 
     {% if 'gcode_macro MULTI_HOTEND' in printer and printer['virtual_sdcard'].is_active %}     

     ### check tool 0 for carriage 0|1  
        {% for carriage in user_vars.toolhead %} 
          {% if user_vars.toolhead[carriage].0 !=user_vars.multi_hotend[carriage] %}
            SET_DUAL_CARRIAGE CARRIAGE={carriage}   
            MULTI_HOTEND_ACTION  EXTRUDER={user_vars.toolhead[carriage].0}      
          {% endif %}   
        {% endfor %}    
      {% endif %}  

#----------------------------------------------------------------------------------------------------
  
    SET_DUAL_CARRIAGE CARRIAGE=1   
    G1 {axis + (user_vars.idex_mode.carriage_offset)|string} F{user_vars.idex_mode.feedrate}                  
    ACTIVATE_{systems}   EXTRUDER={user_vars.toolhead[1][0]}      # carriage 1 / tool 0 
    SET_GCODE_OFFSET {axis}=0      
    SET_DUAL_CARRIAGE CARRIAGE=0    
    G1 {axis + 0|string} F{user_vars.idex_mode.feedrate}
    ### activate mode
    SET_DUAL_CARRIAGE CARRIAGE=1  MODE={mode}
    ### sync heaters 
    {% if printer['gcode_macro SET_SYNC_HEATERS_MODE'] is defined %}   
        SET_SYNC_HEATERS_MODE  WAIT=0 
    {% endif %}    
    ### sync extruders 
    ACTIVATE_{systems}   EXTRUDER={user_vars.toolhead[0][0]}      # carriage 0 / tool 0 
    SYNC_EXTRUDER_MOTION EXTRUDER={user_vars.toolhead[1][0]} MOTION_QUEUE={user_vars.toolhead[0][0]}   

    ### update variable tool_change
      {% if 'gcode_macro SYNC_SWITCHING_TOOL' not in printer %}   
        {% set _dummy = user_vars.tool_change.update( {'enable' : False } ) %} 
      {% endif %}

   {% endif %}

    ### sync print fans    
    TOOLHEAD_PRINT_FAN
    RESTORE_Z_TOOL  
  
    ### update variable for M605 mode
    SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=tool_change  VALUE="{user_vars.tool_change}"  

#####################################################################